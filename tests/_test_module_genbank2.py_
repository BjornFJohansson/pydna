import http
import io
from unittest import mock

"""
handle
Out[8]: <http.client.HTTPResponse at 0x7f257a402fd0> 
handle
Out[14]: <_io.TextIOWrapper encoding='UTF-8'>
"""
# @mock.patch('Bio.Entrez.urlopen')
# def test_biopython_Entrez_efetch_whole(mock_urlopen):
#     from Bio import Entrez
#     from Bio import SeqIO
#     with open("X60065.gb", "rb") as f:
#         canned = f.read()
#     hndl = io.BytesIO(canned)
#     HTTPResponse = mock.MagicMock(spec=http.client.HTTPResponse)
#     HTTPResponse.read.side_effect = hndl.read
#     HTTPResponse.read1.side_effect = hndl.read
#     HTTPResponse.readable.return_value = True
#     HTTPResponse.closed = False
#     HTTPResponse.isclosed.return_value = False
#     HTTPResponse.will_close = True
#     HTTPResponse.url = "url"
#     HTTPResponse.headers = mock.MagicMock(spec=http.client.HTTPMessage)
#     HTTPResponse.headers.get_content_subtype.return_value="plain"
#     mock_urlopen.return_value = HTTPResponse 
#     Entrez.email = "bjornjobb@gmail.com"
#     Entrez.tool  = "pydna"
#     handle = Entrez.efetch(db="nuccore",
#                            id="X60065.1",
#                            rettype="gb",
#                            retmode="text")
    
#     result = SeqIO.read(handle, "genbank")
#     assert str(result.seq) == str(SeqIO.read("X60065.gb", "gb").seq)
@mock.patch('Bio.Entrez.urlopen')                                 # This works!
def test_biopython_Entrez_efetch_whole(urlopenMock):
    from Bio import Entrez
    x = open("X60065.gb", "rb")                     # x is a _io.BufferedReader
    x.url = "http"
    x.headers = mock.MagicMock()
    x.headers.get_content_subtype.return_value="plain"
    urlopenMock.return_value = x
    Entrez.email = "bjornjobb@gmail.com"
    Entrez.tool  = "pydna"
    handle = Entrez.efetch(db="nuccore",        # handle is a _io.TextIOWrapper
                           id="X60065.1",
                           rettype="gb",
                           retmode="text")
    from Bio import SeqIO
    result = SeqIO.read(handle, "genbank")        # handle.readline() is called
    canned = SeqIO.read("X60065.gb", "genbank")
    assert str(result.seq) == str(canned.seq)

@mock.patch('Bio.Entrez.urlopen')                                 # This works!
def test_biopython_Entrez_efetch_whole(urlopenMock):
    from Bio import Entrez
    x = open("X60065.gb", "rb")                     # x is a _io.BufferedReader
    x.url = "http"
    x.headers = mock.MagicMock()
    x.headers.get_content_subtype.return_value="plain"
    urlopenMock.return_value = x
    Entrez.email = "bjornjobb@gmail.com"
    Entrez.tool  = "pydna"
    handle = Entrez.efetch(db="nuccore",        # handle is a _io.TextIOWrapper
                           id="X60065.1",
                           rettype="gb",
                           retmode="text")
    from Bio import SeqIO
    result = SeqIO.read(handle, "genbank")        # handle.readline() is called
    canned = SeqIO.read("X60065.gb", "genbank")
    assert str(result.seq) == str(canned.seq)
    
test_biopython_Entrez_efetch_whole()


@mock.patch('Bio.Entrez.urlopen')
def openPatch(urlopenMock): 
    import Bio
    from Bio import Entrez
    from Bio.Entrez import urlopen
    print(urlopenMock)
    print(urlopen)
    print(Entrez.urlopen)
    print(Bio.Entrez.urlopen)
openPatch()


@mock.patch('Bio.Entrez.urlopen')
def mytest(mock_urlopen):
    from Bio.Entrez import urlopen
    import io
    file_spec = list(set(dir(io.TextIOWrapper)).union(set(dir(io.BytesIO))))
    handle = mock.MagicMock(spec=file_spec)
    handle.mode = 'rb'
    handle.raw = mock.MagicMock(spec=io.FileIO)
    handle.read.return_value = 'resp1'
    mock_urlopen.return_value = handle
    res = urlopen("http://google.com") # http.client.HTTPResponse
    u = io.TextIOWrapper(res)
    print(u.read())
    #assert res.read() == 'resp1'
mytest()


@mock.patch('Bio.Entrez.urlopen')
def mytest(mock_urlopen):
    from Bio.Entrez import urlopen
    import io, http
    handle = mock.MagicMock(spec=http.client.HTTPResponse)
    handle.read.return_value = b'resp1'
    handle.readable.return_value =True
    handle.closed=False
    handle.isclosed.return_value = False
    handle.will_close=True
    mock_urlopen.return_value = handle
    res = urlopen("http://google.com") # http.client.HTTPResponse
    u = io.TextIOWrapper(res, encoding=("latin-1"))
    print(u.read())
    #assert res.read() == 'resp1'
mytest()


@mock.patch('Bio.Entrez.urlopen')
def mytest(mock_urlopen):
    from Bio.Entrez import urlopen
    HTTPResponse = mock.MagicMock(spec=http.client.HTTPResponse)
    HTTPResponse.read.return_value = b'somedata'
    HTTPResponse.readable.return_value = True
    HTTPResponse.closed = False
    HTTPResponse.isclosed.return_value = False
    HTTPResponse.will_close = True
    mock_urlopen.return_value = HTTPResponse
    response = urlopen("http://google.com") # http.client.HTTPResponse
    wrapped = io.TextIOWrapper(response, encoding=("latin-1"))
    assert wrapped.read() == 'somedata'
mytest()


@mock.patch('Bio.Entrez.urlopen')
def test_biopython_Entrez_efetch_whole(mock_urlopen):
    from Bio import Entrez
    from Bio import SeqIO
    canned = SeqIO.read("X60065.gb", "genbank")
    HTTPResponse = mock.MagicMock(spec=http.client.HTTPResponse)
    HTTPResponse.read.return_value = bytes(canned.format("gb"), encoding="utf8")
    HTTPResponse.read1.return_value = bytes(canned.format("gb"), encoding="utf8")
    HTTPResponse.readable.return_value = True
    HTTPResponse.closed = False
    HTTPResponse.isclosed.return_value = False
    HTTPResponse.will_close = True
    HTTPResponse.url = "url"
    HTTPResponse.headers = mock.MagicMock(spec=http.client.HTTPMessage)
    HTTPResponse.headers.get_content_subtype.return_value="plain"
    mock_urlopen.return_value = HTTPResponse 
    Entrez.email = "bjornjobb@gmail.com"
    Entrez.tool  = "pydna"
    handle = Entrez.efetch(db="nuccore",
                           id="X60065.1",
                           rettype="gb",
                           retmode="text")
    result = next(SeqIO.parse(handle, "genbank"))
    assert str(result.seq) == str(canned.seq)

test_biopython_Entrez_efetch_whole()


@mock.patch('Bio.Entrez.urlopen')
def test_biopython_Entrez_efetch_whole(mock_urlopen):
    from Bio import Entrez
    from Bio import SeqIO
    canned = open("X60065.gb", "rb")
    HTTPResponse = mock.MagicMock(spec=http.client.HTTPResponse)
    HTTPResponse.read.side_effect = canned.read
    HTTPResponse.read1.side_effect = canned.read1
    HTTPResponse.readable.return_value = True
    HTTPResponse.closed = False
    HTTPResponse.isclosed.return_value = False
    HTTPResponse.will_close = True
    HTTPResponse.url = "url"
    HTTPResponse.headers = mock.MagicMock(spec=http.client.HTTPMessage)
    HTTPResponse.headers.get_content_subtype.return_value="plain"
    mock_urlopen.return_value = HTTPResponse 
    Entrez.email = "bjornjobb@gmail.com"
    Entrez.tool  = "pydna"
    handle = Entrez.efetch(db="nuccore",
                           id="X60065.1",
                           rettype="gb",
                           retmode="text")
    
    result = SeqIO.read(handle, "genbank")
    assert str(result.seq) == str(SeqIO.read("X60065.gb", "gb").seq)

test_biopython_Entrez_efetch_whole()


@mock.patch('Bio.Entrez.urlopen')
def test_biopython_Entrez_efetch_whole(mock_urlopen):
    from Bio import Entrez
    from Bio import SeqIO
    with open("X60065.gb", "rb") as f:
        canned = f.read()
    hndl = io.BytesIO(canned)
    HTTPResponse = mock.MagicMock(spec=http.client.HTTPResponse)
    HTTPResponse.read.side_effect = hndl.read
    HTTPResponse.read1.side_effect = hndl.read
    HTTPResponse.readable.return_value = True
    HTTPResponse.closed = False
    HTTPResponse.isclosed.return_value = False
    HTTPResponse.will_close = True
    HTTPResponse.url = "url"
    HTTPResponse.headers = mock.MagicMock(spec=http.client.HTTPMessage)
    HTTPResponse.headers.get_content_subtype.return_value="plain"
    mock_urlopen.return_value = HTTPResponse 
    Entrez.email = "bjornjobb@gmail.com"
    Entrez.tool  = "pydna"
    handle = Entrez.efetch(db="nuccore",
                           id="X60065.1",
                           rettype="gb",
                           retmode="text")
    
    result = SeqIO.read(handle, "genbank")
    assert str(result.seq) == str(SeqIO.read("X60065.gb", "gb").seq)

test_biopython_Entrez_efetch_whole()








""" 
Old code:

in Bio.Entrez:
    from Bio._py3k import urlopen as _urlopen

in Bio._py3k
    from urllib.request import urlopen

Hence, _urlopen is really request.urlopen

New code:
    
in Bio.Entrez:
    from urllib.request import urlopen

So this is the same.

Old code:
    def _open(cgi, params=None, post=None, ecitmatch=False):
       # cgi is the URL for the cgi script to access.
       ...
       handle = _urlopen(cgi)
       ...
       return _binary_to_string_handle(handle)
       
     in  _binary_to_string_handle
       wrapped = io.TextIOWrapper(io.BufferedReader(handle), encoding=encoding)
       return wrapped

New code:
    ...
    handle = urlopen(cgi)
    ...
    subtype = handle.headers.get_content_subtype()
    if subtype == "plain":
        url = handle.url
        handle = io.TextIOWrapper(handle, encoding="UTF-8")
        handle.url = url
    return handle

    
    
""" 